{"meta":{"title":"DevJH","subtitle":"Writed by JH, IT Blog","description":"IT Blog","author":"Lee Jung Hoon","url":"https://lee-jung-hoon.github.io"},"pages":[],"posts":[{"title":"JEUS8, WEBTOB5 라이센스 적용 방법","slug":"was-jeus-license-001","date":"2018-09-16T01:51:08.000Z","updated":"2018-09-16T01:53:21.664Z","comments":true,"path":"2018/09/16/was-jeus-license-001/","link":"","permalink":"https://lee-jung-hoon.github.io/2018/09/16/was-jeus-license-001/","excerpt":"","text":"","categories":[{"name":"WAS","slug":"WAS","permalink":"https://lee-jung-hoon.github.io/categories/WAS/"},{"name":"JEUS","slug":"WAS/JEUS","permalink":"https://lee-jung-hoon.github.io/categories/WAS/JEUS/"}],"tags":[{"name":"WAS","slug":"WAS","permalink":"https://lee-jung-hoon.github.io/tags/WAS/"},{"name":"JEUS","slug":"JEUS","permalink":"https://lee-jung-hoon.github.io/tags/JEUS/"},{"name":"WEBTOB","slug":"WEBTOB","permalink":"https://lee-jung-hoon.github.io/tags/WEBTOB/"},{"name":"LICENSE","slug":"LICENSE","permalink":"https://lee-jung-hoon.github.io/tags/LICENSE/"}]},{"title":"maven-4.0.0.xsd에서 에러날 경우","slug":"programming-spring-error-003","date":"2018-09-09T12:59:01.000Z","updated":"2018-09-16T04:02:49.746Z","comments":true,"path":"2018/09/09/programming-spring-error-003/","link":"","permalink":"https://lee-jung-hoon.github.io/2018/09/09/programming-spring-error-003/","excerpt":"","text":"pom.xml 프로젝트 태그 내 maven-4.0.0.xsd에서 에러가 발생할 경우위와 같은 에러가 발생할 경우 https://mvnrepository.com/artifact/org.apache.maven/maven-plugin-api 해당 URL에 접속하여 안정적인 버전의 maven dependency를 복사하여 pom.xml에 추가합니다. 해당 프로젝트 오른쪽 우클릭 -&gt; Run As -&gt; Maven Clean, Maven Install 실행 해당 프로젝트 오른쪽 우클릭 -&gt; Maven -&gt; Update Project(Alt + F5) 실행","categories":[{"name":"PROGRAMMING","slug":"PROGRAMMING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/"},{"name":"SPRING","slug":"PROGRAMMING/SPRING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/SPRING/"}],"tags":[{"name":"SPRING","slug":"SPRING","permalink":"https://lee-jung-hoon.github.io/tags/SPRING/"},{"name":"MAVEN","slug":"MAVEN","permalink":"https://lee-jung-hoon.github.io/tags/MAVEN/"}]},{"title":"JDK 설치 및 환경변수 설정","slug":"programming-java-install-001","date":"2018-09-09T11:42:02.000Z","updated":"2018-09-09T14:49:31.975Z","comments":true,"path":"2018/09/09/programming-java-install-001/","link":"","permalink":"https://lee-jung-hoon.github.io/2018/09/09/programming-java-install-001/","excerpt":"","text":"1. JDK의 계층 구조 JVM(JAVA Virtual Machine) 자바 가성 머신의 줄임말으로써 JAVA와 OS의 중개자 역할을 한다. JVM이 있으므로 인해 자바는 OS에 구애받지 않는 ‘확장성’이라는 장점을 가지게 된다. 그 외에도 가비지 컬렉션(Garbage Collection), 메모리 관리등을 수행한다. JRE(JAVA Runtime Environment) 자바의 기능들을 수행하는 API를 감싸고 있는 실행환경 단순 프로그램 실행만을 위해서는 JRE 설치로 충분하다. JDK(JAVA Development Kit) 자바의 실행환경을 포함하는 자바 개발환경을 의미한다. 자바 개발을 위해서는 JDK가 설치되어야 한다. 2. JDK 설치http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 상단의 JDK SE 다운로드 URL에 접속하여 본인 개발 환경에 맞는 설치파일을 다운로드 및 설치를 진행한다. 3. JAVA 환경변수 java.exe : JVM 실행 파일 javac.exe : 컴파일러 JAVA_HOME 설정 내컴퓨터 -&gt; 속성 -&gt; 고급시스템설정 -&gt; 고급 -&gt; 환경변수 -&gt; 새로만들기 변수 이름 : JAVA_HOME 변수 값 : JAVA 설치 경로 PATH 설정 내컴퓨터 -&gt; 속성 -&gt; 고급시스템설정 -&gt; 고급 -&gt; 환경변수 -&gt; 새로만들기 PATH 변수에 %JAVA_HOME%\\bin을 추가 JAVA_HOME 변수에 설정한 JAVA 설치 경로 하위의 bin 폴더를 PATH 추가해주는 것입니다.** 리눅스나 유닉스 계열은 profile에 설정 4. 확인 명령 프롬프트에 ‘java -version’, ‘javac -version’를 입력하여 버젼을 확인한다.","categories":[{"name":"PROGRAMMING","slug":"PROGRAMMING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/"},{"name":"JAVA","slug":"PROGRAMMING/JAVA","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/JAVA/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://lee-jung-hoon.github.io/tags/JAVA/"},{"name":"JDK - JRE - JVM","slug":"JDK-JRE-JVM","permalink":"https://lee-jung-hoon.github.io/tags/JDK-JRE-JVM/"}]},{"title":"스프링 DI(의존 주입)","slug":"programming-spring-study-002","date":"2018-09-09T09:46:16.000Z","updated":"2018-09-16T02:48:14.598Z","comments":true,"path":"2018/09/09/programming-spring-study-002/","link":"","permalink":"https://lee-jung-hoon.github.io/2018/09/09/programming-spring-study-002/","excerpt":"","text":"스프링의 DI(의존 주입)을 보기 전에 먼저 스프링의 목적을 알아볼 필요가 있다. 2000년대 초반 각종 자바 컨퍼런스에서 자주 논의됐던 주제 ‘무엇때문에 자바 엔터프라이즈 프로젝트는 실패하는가?’ 그에 대한 답은 바로 시스템 개발이 복잡하다는 것이었다. 엔터프라이즈 시스템이란 서버에서 동작하며 기업과 조직의 업무를 처리하는 시스템 이러한 시스템은 비즈니스 로직 구현만이 아닌 보안, 안정성, 확장성, 성능을 모두 고려해서 개발해야한다. 결국 비즈니스 로직, 안정성, 확장성, 성능에 더해 추후 바뀔지 모르는 비즈니스 로직에 대한 유지보수 및 수정까지 고려해야하는 큰 어려움에 부딪혔다 1. 의존이란 DI(Dependency Infjection) 의존 관계 주입이라는 말로 해석 할 수 있다. 표준국어대사전에 의하면 ‘의존’이란 다른 것에 의지하여 존재하는 즉, 의존관계란 변경에 의해 영향을 받는 관계를 의미한다. 1234567891011121314151617public class MemberRegisterService &#123; // new 연산자를 이용해서 MemeberDao의 인스턴스를 생성한다. 이를 '보통객체'라 부른다. private MemberDao memberDao = new MemberDao(); public void regist(RegisterRequest req) &#123; // 이메일로 회원 데이터(Member)조회 Member member = memberDao.selectByEmail(req.getEmail()); if (member != null) &#123; // 같은 이메일을 가진 회원이 이미 존재하면 익셉션 발생 throw new AlreadyExistingMemberException(\"dup email : \" + req.getEmail()); &#125; // 같은 이메일을 가진 회원이 존재하지 않으면 DB에 삽입 Member newMember = new Member(req.getEmail(), req.getPassword(), req.getName(), new Date()); memberDao.insert(newMember); &#125;&#125; 위 코드는 전달 받은 회원 객체 내 이메일 주소가 현재 회원 DB 테이블 내에 존재하는 경우익셉션을 발생시키고 같은 이메일 주소를 가진 회원이 존재하지 않는 경우 DB에 INSERT 시키는 간단한 로직을 가지고 있다. 이와 같이 한 클래스에서 다른 클래스의 메소드를 실행하는 경우를 ‘의존’한다고 말한다. 의존은 변경에 의해 영향을 받는 관계를 의미한다. ex) MembaerDao의 insert()메소드의 이름을 insertMemeber()라고 변경하면 이 메소드를 사용하는 타 클래스들도 영향을 받는다. 의존 객체를 구하는 방법에는 DI와 서비스 로케이터가 있다. DI는 의존하는 객체를 직접 생성하지 않고 의존 객체를 전달받는 방식을 사용한다. 123456789101112Member dao = new MemberDao();// 의존 객체를 생성자를 통해 주입처리MemberRegisterService service = new MemberRegisterService(dao);...private MemberDao memberDao; // MemberRegisterServeice가 의존하고 있는 MemberDao 객체를 주입 public MemberRegisterService(MemberDao memberDao) &#123; this.memberDao = memberDao; &#125;...&#125; 위와 같이 의존 객체를 직접 생성하지 않고 생성자를 통해 전달 받으므로 DI(의존 주입) 패턴을 따르고 있다. 초보 웹 개발자를 위한 스프링 4 프로그래밍 입문(최범균 지음) 토비의 스프링 3.1(이일민 지음)","categories":[{"name":"PROGRAMMING","slug":"PROGRAMMING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/"},{"name":"SPRING","slug":"PROGRAMMING/SPRING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/SPRING/"}],"tags":[{"name":"SPRING","slug":"SPRING","permalink":"https://lee-jung-hoon.github.io/tags/SPRING/"},{"name":"DI","slug":"DI","permalink":"https://lee-jung-hoon.github.io/tags/DI/"},{"name":"IOC","slug":"IOC","permalink":"https://lee-jung-hoon.github.io/tags/IOC/"}]},{"title":"java-spring-study-001","slug":"programming-spring-study-001","date":"2018-09-09T09:46:11.000Z","updated":"2018-09-09T11:46:39.702Z","comments":true,"path":"2018/09/09/programming-spring-study-001/","link":"","permalink":"https://lee-jung-hoon.github.io/2018/09/09/programming-spring-study-001/","excerpt":"","text":"","categories":[{"name":"PROGRAMMING","slug":"PROGRAMMING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/"},{"name":"SPRING","slug":"PROGRAMMING/SPRING","permalink":"https://lee-jung-hoon.github.io/categories/PROGRAMMING/SPRING/"}],"tags":[]},{"title":"테이블스페이스 용량 확인 쿼리","slug":"dbms-oracle-tablespace-001","date":"2018-09-09T09:26:25.000Z","updated":"2018-09-09T09:49:51.331Z","comments":true,"path":"2018/09/09/dbms-oracle-tablespace-001/","link":"","permalink":"https://lee-jung-hoon.github.io/2018/09/09/dbms-oracle-tablespace-001/","excerpt":"","text":"업무를 하다보면 계정의 테이블스페이스의 현재 상태를 체크해야할 일이 생깁니다. 예를 들어 데이터를 이관해야하는 경우, AUTOEXTENSIBLE가 YES일지라도 테이블스페이스의 현재 상태는 체크해주는게 좋습니다. 123456789101112131415SELECT SUBSTR(A.TABLESPACE_NAME,1,30) TABLESPACE, ROUND(SUM(A.TOTAL1)/1024/1024,1) \"총 용량(MB)\", ROUND(SUM(A.TOTAL1)/1024/1024,1)-ROUND(SUM(A.SUM1)/1024/1024,1) \"사용량(MB)\", ROUND(SUM(A.SUM1)/1024/1024,1) \"잔여용량(MB)\", ROUND((ROUND(SUM(A.TOTAL1)/1024/1024,1)-ROUND(SUM(A.SUM1)/1024/1024,1))/ROUND(SUM(A.TOTAL1)/1024/1024,1)*100,2) \"사용률(%)\"FROM (SELECT TABLESPACE_NAME,0 TOTAL1,SUM(BYTES) SUM1,MAX(BYTES) MAXB,COUNT(BYTES) CNT FROM DBA_FREE_SPACE GROUP BY TABLESPACE_NAME UNION SELECT TABLESPACE_NAME,SUM(BYTES) TOTAL1,0,0,0 FROM DBA_DATA_FILES GROUP BY TABLESPACE_NAME) AGROUP BY A.TABLESPACE_NAMEORDER BY TABLESPACE; 해당 쿼리 실행 시 총 용량과 현재 사용량, 잔여용량, 사용률 등을 확인할 수 있습니다.","categories":[{"name":"DBMS","slug":"DBMS","permalink":"https://lee-jung-hoon.github.io/categories/DBMS/"},{"name":"ORACLE","slug":"DBMS/ORACLE","permalink":"https://lee-jung-hoon.github.io/categories/DBMS/ORACLE/"}],"tags":[{"name":"DBMS","slug":"DBMS","permalink":"https://lee-jung-hoon.github.io/tags/DBMS/"},{"name":"ORACLE","slug":"ORACLE","permalink":"https://lee-jung-hoon.github.io/tags/ORACLE/"},{"name":"TABLESPACE","slug":"TABLESPACE","permalink":"https://lee-jung-hoon.github.io/tags/TABLESPACE/"}]}]}